##
##  Mask Cam
##  Copyright (c) 2020 by SilentByte <https://www.silentbyte.com/>
##

service: maskcam


provider:
  name: aws
  region: us-east-1
  runtime: python3.7
  iamRoleStatements:
    - Effect: "Allow"
      Action: sagemaker:InvokeEndpoint
      Resource: "arn:aws:sagemaker:*:*:*"
    - Effect: "Allow"
      Action: s3:PutObject
      Resource: "arn:aws:s3:::${env:PHOTO_BUCKET_NAME}/${env:PHOTO_KEY_PREFIX}*"
    - Effect: "Allow"
      Action: s3:GetObject
      Resource: "arn:aws:s3:::${env:PHOTO_BUCKET_NAME}/${env:PHOTO_KEY_PREFIX}*"



environment:
  DEBUG: ${env:DEBUG}
  PRODUCTION: ${env:PRODUCTION}

  DB_HOST: ${env:DB_HOST}
  DB_PORT: ${env:DB_PORT}
  DB_NAME: ${env:DB_NAME}
  DB_USER: ${env:DB_USER}
  DB_PASSWORD: ${env:DB_PASSWORD}
  SAGEMAKER_ENDPOINT: ${SAGEMAKER_ENDPOINT}
  QUERY_MAX_RESULT_COUNT: ${env:QUERY_MAX_RESULT_COUNT}
  QUERY_DEFAULT_RESULT_COUNT: ${env:QUERY_DEFAULT_RESULT_COUNT}

functions:
  upload:
      handler: maskcam/lambdas.upload_handler
      events:
        - http:
            path: upload
            method: post
            cors:
              origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN}
              headers:
                - Content-Type
              allowCredentials: false

  fetch_activities:
    handler: maskcam/lambdas.fetch_activities_handler
    events:
      - http:
          path: activities
          method: get
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN}
            headers:
              - Content-Type
            allowCredentials: false

  confirm_activity:
    handler: maskcam/lambdas.rate_activity_handler
    events:
      - http:
          path: rate
          method: post
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN}
            headers:
              - Content-Type
            allowCredentials: false

  fetch_stats:
    handler: maskcam/lambdas.fetch_stats_handler
    events:
      - http:
          path: stats
          method: get
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN}
            headers:
              - Content-Type
            allowCredentials: false

  ping:
    handler: maskcam/lambdas.ping_handler
    events:
      - http:
          path: ping
          method: post
          cors:
            origin: ${env:ACCESS_CONTROL_ALLOW_ORIGIN}
            headers:
              - Content-Type
            allowCredentials: false

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-python-requirements

package:
  exclude:
    - venv/**
    - node_modules/**
    - __pycache__/**
    - "*.py[cod]"
    - "*$py.class"
    - .idea/**
    - .serverless/**
    - htmlcov/**
    - .coverage
    - .env*

custom:
  pythonRequirements:
    dockerizePip: true